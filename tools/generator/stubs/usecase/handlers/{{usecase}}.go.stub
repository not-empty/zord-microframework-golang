package handlers

import (
	"github.com/labstack/echo/v4"
	"go-skeleton/internal/application/services/{{usecase}}"
	_ "go-skeleton/internal/application/services"
	"go-skeleton/pkg/logger"
	"go-skeleton/pkg/registry"
)

type {{usecasePascalCase}}Handlers struct {
	logger    *logger.Logger
}

func New{{usecasePascalCase}}Handlers(reg *registry.Registry) *{{usecasePascalCase}}Handlers {
	return &{{usecasePascalCase}}Handlers{
		logger:          reg.Inject("logger").(*logger.Logger),
	}
}

// Handle{{usecasePascalCase}} {{usecasePascalCase}}
// @Summary      {{usecasePascalCase}}
// @Tags         {{usecasePascalCase}}
// @Accept       json
// @Produce      json
// @Success      200  {object}  {{usecase}}.Response
// @Param        Tenant header string false "tenant name"
// @Failure      400  {object}  services.Error
// @Failure      404  {object}  services.Error
// @Failure      500  {object}  services.Error
// @Router       /{{usecase}} [get]
func (hs *{{usecasePascalCase}}Handlers) Handle{{usecasePascalCase}}(context echo.Context) error {
	s := {{usecase}}.NewService(hs.logger)

	data := new({{usecase}}.Data)
	if errors := context.Bind(data); errors != nil {
		return context.JSON(422, errors)
	}

	request := {{usecase}}.NewRequest(data)
	s.Execute(request)

	response, err := s.GetResponse()
	if err != nil {
		return context.JSON(422, err)
	}
	return context.JSON(200, response)
}